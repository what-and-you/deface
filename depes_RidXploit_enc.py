# This file has been encrypted using AES and base64 by RidXploit

encrypted_code = ""
key = bytes.fromhex("01dd0c114355e0bfc7a5d9f7cd8216fe16ca7297121cebc8bd30485c282a9719")


import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad

def aes_decrypt(data, key):
    data = base64.b64decode(data.replace("RidXploit_", "").replace("_RidXploit", ""))
    iv = data[:16]
    ciphertext = data[16:]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    decrypted = unpad(cipher.decrypt(ciphertext), AES.block_size)
    return decrypted

# Decrypt and execute the Python code
decrypted_code = aes_decrypt(encrypted_code, key)
exec(decrypted_code.decode('utf-8'))
